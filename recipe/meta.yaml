{% set version = "0.0.24" %}

package:
  name: uutils-coreutils
  version: {{ version }}

source:
  url: https://github.com/uutils/coreutils/archive/{{ version }}.tar.gz
  sha256: 57c9083695e35712ddafc3cd8c579481ba5976107f357a6b5f1b1d813181dc36
  patches:
    - patches/0001-fix-BUILDDIR-in-make.patch   # [unix]
    # Fixes long command and quotes problems
    - patches/0002-shorten-sh-commands.patch

build:
  number: 0
  ignore_run_exports:
    # cannot use same approach as for non-linux, because we still need the
    # run-export for libgcc, which has a lower bound that's different from
    # the compiler version itself, c.f. min_runtime_version in
    # https://github.com/conda-forge/ctng-compiler-activation-feedstock/blob/main/recipe/meta.yaml
    - libstdcxx-ng  # [linux]
    - libstdcxx     # [linux]
  ignore_run_exports_from:
    - {{ compiler('cxx') }}  # [not linux]

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('rust') }}
    - make
    - cargo-bundle-licenses
  run_constrained:
    - coreutils ==999999999
    - gnu-coreutils ==999999999

test:
  commands:
    - coreutils --help
    - cat --help

about:
  home: https://github.com/uutils/coreutils
  summary: Cross-platform Rust rewrite of the GNU coreutils
  description: |
    uutils is an attempt at writing universal (as in cross-platform) CLI utilities in Rust.
    uutils aims to work on as many platforms as possible,
    to be able to use the same utils on Linux, Mac, Windows and other platforms.
    This ensures, for example, that scripts can be easily transferred between platforms.
    Rust was chosen not only because it is fast and safe,
    but is also excellent for writing cross-platform code.
  license: MIT
  license_family: MIT
  license_file:
    - LICENSE
    - THIRDPARTY.yml
  doc_url: https://uutils.github.io/user/
  dev_url: https://github.com/uutils/coreutils

extra:
  recipe-maintainers:
    - sshockwave
    - h-vetinari
